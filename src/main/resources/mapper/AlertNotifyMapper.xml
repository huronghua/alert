<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.banmatrip.alert.dao.AlertNotifyMapper" >
  <resultMap id="BaseResultMap" type="com.banmatrip.alert.domain.AlertNotify" >
    <id column="notify_id" property="notifyId" jdbcType="INTEGER" />
    <result column="notify_user_id" property="notifyUserId" jdbcType="INTEGER" />
    <result column="config_id" property="configId" jdbcType="INTEGER" />
    <result column="create_time" property="createTime" jdbcType="TIMESTAMP" />
    <result column="update_time" property="updateTime" jdbcType="TIMESTAMP" />
    <result column="create_id" property="createId" jdbcType="INTEGER" />
    <result column="update_id" property="updateId" jdbcType="INTEGER" />
  </resultMap>
  <sql id="Base_Column_List" >
    notify_id, notify_user_id, config_id, create_time, update_time, create_id, update_id
  </sql>
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Integer" >
    select 
    <include refid="Base_Column_List" />
    from alert_notify
    where notify_id = #{notifyId,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer" >
    delete from alert_notify
    where notify_id = #{notifyId,jdbcType=INTEGER}
  </delete>
  <insert id="insert" parameterType="com.banmatrip.alert.domain.AlertNotify" >
    insert into alert_notify (notify_id, notify_user_id, config_id, 
      create_time, update_time, create_id, 
      update_id)
    values (#{notifyId,jdbcType=INTEGER}, #{notifyUserId,jdbcType=INTEGER}, #{configId,jdbcType=INTEGER}, 
      #{createTime,jdbcType=TIMESTAMP}, #{updateTime,jdbcType=TIMESTAMP}, #{createId,jdbcType=INTEGER}, 
      #{updateId,jdbcType=INTEGER})
  </insert>
  <insert id="insertSelective" parameterType="com.banmatrip.alert.domain.AlertNotify" >
    insert into alert_notify
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="notifyId != null" >
        notify_id,
      </if>
      <if test="notifyUserId != null" >
        notify_user_id,
      </if>
      <if test="configId != null" >
        config_id,
      </if>
      <if test="createTime != null" >
        create_time,
      </if>
      <if test="updateTime != null" >
        update_time,
      </if>
      <if test="createId != null" >
        create_id,
      </if>
      <if test="updateId != null" >
        update_id,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="notifyId != null" >
        #{notifyId,jdbcType=INTEGER},
      </if>
      <if test="notifyUserId != null" >
        #{notifyUserId,jdbcType=INTEGER},
      </if>
      <if test="configId != null" >
        #{configId,jdbcType=INTEGER},
      </if>
      <if test="createTime != null" >
        #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="updateTime != null" >
        #{updateTime,jdbcType=TIMESTAMP},
      </if>
      <if test="createId != null" >
        #{createId,jdbcType=INTEGER},
      </if>
      <if test="updateId != null" >
        #{updateId,jdbcType=INTEGER},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="com.banmatrip.alert.domain.AlertNotify" >
    update alert_notify
    <set >
      <if test="notifyUserId != null" >
        notify_user_id = #{notifyUserId,jdbcType=INTEGER},
      </if>
      <if test="configId != null" >
        config_id = #{configId,jdbcType=INTEGER},
      </if>
      <if test="createTime != null" >
        create_time = #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="updateTime != null" >
        update_time = #{updateTime,jdbcType=TIMESTAMP},
      </if>
      <if test="createId != null" >
        create_id = #{createId,jdbcType=INTEGER},
      </if>
      <if test="updateId != null" >
        update_id = #{updateId,jdbcType=INTEGER},
      </if>
    </set>
    where notify_id = #{notifyId,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.banmatrip.alert.domain.AlertNotify" >
    update alert_notify
    set notify_user_id = #{notifyUserId,jdbcType=INTEGER},
      config_id = #{configId,jdbcType=INTEGER},
      create_time = #{createTime,jdbcType=TIMESTAMP},
      update_time = #{updateTime,jdbcType=TIMESTAMP},
      create_id = #{createId,jdbcType=INTEGER},
      update_id = #{updateId,jdbcType=INTEGER}
    where notify_id = #{notifyId,jdbcType=INTEGER}
  </update>

  <delete id="deleteByConfigId" parameterType="java.util.List">
    delete from alert_notify
    where config_id IN
    <foreach collection="configIdList" item="item" index="index" open="(" close=")" separator=",">
      #{item}
    </foreach>
  </delete>
  
  <insert id="insertByConfigIdAndContactList">
    INSERT INTO alert_notify (notify_user_id, config_id)
    VALUES
    <foreach collection="contactList" item="item" index="index" separator=",">
      (#{item},#{configId})
    </foreach>
  </insert>
  
  <select id="selectContactsListByConfigId" resultType="java.lang.Integer">
    SELECT
        b.contrast_id
    FROM
        `alert_notify` a
    LEFT JOIN
    sso_contrast_id b ON b.user_id = a.notify_user_id
    WHERE
        a.config_id = #{configId}
  </select>

  <select id="selectOrderAbnormalContactByDestinationId" resultType="java.lang.Integer">
    SELECT
        c.contrast_id
    FROM
        (
            SELECT
                *
            FROM
                alert_config
            WHERE
                destination_id = #{destinationId}
            AND config_type = 3
            AND `level` = 1
        ) a
    LEFT JOIN alert_notify b ON b.config_id = a.config_id
    LEFT JOIN sso_contrast_id c ON c.user_id = b.notify_user_id
  </select>
</mapper>